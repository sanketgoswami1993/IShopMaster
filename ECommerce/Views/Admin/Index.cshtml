@model List<ECommerce.Models.Products>

@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-1">
        </div>
        <div class="col-md-6">
            <div class="card p-4 shadow-lg" style="width:175%;">
                <div class="row">
                    <div class="col-md-9">
                        <h2>Product List</h2>
                    </div>
                    <div class="col-md-3 mt-2">
                        @*  <a asp-action="Create" class="btn btn-success btn-sm">Add New Products</a> *@
                        <button id="openModal" class="btn btn-success">Add New Products</button>
                    </div>
                </div>
                <br />
                <!-- Table -->
                <table id="productsTable" class="table">
                    <thead class="table-dark">
                        <tr>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Color</th>
                            <th>Quantity</th>
                            <th>MRP</th>
                            <th>Discount</th>
                            <th>Price</th>
                            <th>Arriving Days</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model)
                        {
                            @if (product.ProductImages.Any())
                            {
                                @foreach (var image in product.ProductImages)
                                {
                                    <tr>
                                        <td>@product.Name</td>
                                        <td>@image.Type</td>
                                        <td>@image.Color</td>
                                        <td>@image.Quantity</td>
                                        @*  <td>
                                            <img src="@image.Image" class="img-thumbnail" width="50" height="50" />
                                        </td> *@
                                        <td>₹@image.MRP</td>
                                        <td>@image.Discount%</td>
                                        <td>₹@image.Price.ToString("0.00")</td>
                                        <td>@image.ArrivingDays</td>
                                        <td style="width:20%;">
                                            @* <a asp-action="GetById" asp-route-id="@image.ProductId" asp-route-productsImageId="@image.ProductsImageId" class="btn btn-success btn-sm">View</a>
 *@
                                            <button class="btn btn-success btn-sm view-details"
                                                    data-id="@image.ProductId"
                                                    data-productsimageid="@image.ProductsImageId">
                                                View
                                            </button>

                                            <a href="javascript:void(0);" class="btn btn-primary btn-sm" onclick="editProduct(@image.ProductId, @image.ProductsImageId)">Edit</a>
                                            <!-- Separate Delete Button for Each Image -->
                                            <a href="#" class="btn btn-danger btn-sm"
                                               data-bs-toggle="modal"
                                               data-bs-target="#deleteConfirmModal-@image.ProductsImageId">
                                                Delete
                                            </a>
                                            <div class="modal fade" id="deleteConfirmModal-@image.ProductsImageId" tabindex="-1" aria-labelledby="deleteConfirmLabel" aria-hidden="true">
                                                <div class="modal-dialog">
                                                    <div class="modal-content" style="margin-top: 30%;">
                                                        <div class="modal-header">
                                                            <h5 class="modal-title">Confirm Delete</h5>
                                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                        </div>
                                                        <div class="modal-body">
                                                            <p>Are you sure you want to delete this product?</p>
                                                        </div>
                                                        <div class="modal-footer">
                                                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>

                                                            <!-- Form Submits Directly -->
                                                            <form method="post" asp-action="Delete" asp-route-id="@image.ProductId" asp-route-productsImageId="@image.ProductsImageId">
                                                                <button type="submit" class="btn btn-danger">Delete</button>
                                                            </form>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <span>No data available...</span>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-md-5">
        </div>
    </div>
</div>
<br />


<!-- Add Product Modal -->
<div class="modal fade" id="ProductModal" tabindex="-1" aria-labelledby="ProductModalLabel" aria-modal="true" role="dialog">

    @* <div class="modal fade" id="ProductModal" tabindex="-1" aria-labelledby="ProductModalLabel" aria-hidden="true"> *@
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content" style="width: 200%;">
            <div class="modal-header">
                <h5 class="modal-title" id="ProductModalLabel">Add Products</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="productForm" method="post" enctype="multipart/form-data" asp-controller="Admin" asp-action="Create">
                    <div class="row">
                        <input type="hidden" id="productId" name="productId" value="">
                        <input type="hidden" id="productsImageId" name="productsImageId" value="">
                        <!-- Product Name -->
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label fw-bold">Product Name</label>
                                <input id="productname" class="form-control" placeholder="Enter product name" required>
                                <span class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Type -->
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label fw-bold">Type</label>
                                <input id="productImagesType" name="ProductImagesType" class="form-control" placeholder="Type" required>
                                <span class="text-danger"></span>
                            </div>
                        </div>

                        <!-- Color -->
                        <div class="col-md-4">
                            <div class="form-group">
                                <label class="form-label fw-bold">Color</label>
                                <input id="productImagesColor" name="ProductImagesColor" class="form-control" placeholder="Color" required>
                                <span class="text-danger"></span>
                            </div>
                        </div>
                    </div>

                    <div id="imageContainer">
                        <div class="row image-entry">
                            <div class="row">
                                <!-- Large Image (Col-6) -->
                                <div class="col-md-4 mt-3">
                                    <label class="form-label fw-bold">Image (Large) </label>
                                    <div class="img-preview-container" onclick="$('#LargeImageUpload').click();">
                                        <img id="largePreviewImage" src="https://via.placeholder.com/300" class="img-thumbnail" style="width:100%; height:185px;">
                                    </div>
                                    <input type="file" id="LargeImageUpload" name="LargeImageUpload" class="form-control d-none" accept="image/*">
                                    <span class="text-danger"></span>
                                </div>

                                <!-- Medium Image (Col-3) -->
                                <div class="col-md-4 mt-3">
                                    <label class="form-label fw-bold">Image (Medium)</label>
                                    <div class="img-preview-container" onclick="$('#MediumImageUpload').click();">
                                        <img id="mediumPreviewImage" src="https://via.placeholder.com/150" class="img-thumbnail" style="width:100%; height:185px;">
                                    </div>
                                    <input type="file" id="MediumImageUpload" name="MediumImageFile" class="form-control d-none" accept="image/*">
                                    <span class="text-danger"></span>
                                </div>

                                <!-- Small Image (Col-3) -->
                                <div class="col-md-4 mt-3">
                                    <label class="form-label fw-bold">Image (Small)</label>
                                    <div class="img-preview-container" onclick="$('#SmallImageUpload').click();">
                                        <img id="smallPreviewImage" src="https://via.placeholder.com/150" class="img-thumbnail" style="width:100%; height:185px;">
                                    </div>
                                    <input type="file" id="SmallImageUpload" name="SmallImageUpload" class="form-control d-none" accept="image/*">
                                    <span class="text-danger"></span>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-md-12 mt-3">
                                    <div class="mt-3">
                                        <label class="form-label fw-bold">Description</label>
                                        <textarea id="ProductImagesDescription" name="ProductImagesDescription" class="form-control" placeholder="Enter product Description" required></textarea>
                                        <span class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <br />
                            <div class="row">
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label fw-bold">Quantity</label>
                                        <input type="number" id="ProductImagesQuantity" name="ProductImagesQuantity" class="form-control" placeholder="Quantity" required>
                                        <span class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label fw-bold">MRP</label>
                                        <input type="number" id="ProductImagesMRP" name="ProductImagesMRP" class="form-control" placeholder="MRP" required>
                                        <span class="text-danger"></span>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="form-group">
                                        <label class="form-label fw-bold">Discount</label>
                                        <input type="number" id="ProductImagesDiscount" name="ProductImagesDiscount" class="form-control" placeholder="Discount" required>
                                        <span class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-4 mt-3">
                                    <label class="form-label">Price</label>
                                    <input type="number" class="form-control price-input" placeholder="Calculated Price" readonly>
                                </div>
                                <div class="col-4 mt-3">
                                    <label class="form-label">Arriving Days</label>
                                    <input type="number" id="ProductImagesArrivingDays" name="ProductImagesArrivingDays" class="form-control arrivingDays-input" placeholder="Arriving Days">
                                    <span class="text-danger"></span>
                                </div>
                                <input type="hidden" id="existingLargeImage" value="@($"https://localhost:44353/uploads/Products/{Model.FirstOrDefault()?.ProductId}/Large/{Model.FirstOrDefault()?.ProductImages.FirstOrDefault()?.LargeImage}")" />
                                <input type="hidden" id="existingMediumImage" value="@($"https://localhost:44353/uploads/Products/{Model.FirstOrDefault()?.ProductId}/Medium/{Model.FirstOrDefault()?.ProductImages.FirstOrDefault()?.MediumImage}")" />
                                <input type="hidden" id="existingSmallImage" value="@($"https://localhost:44353/uploads/Products/{Model.FirstOrDefault()?.ProductId}/Small/{Model.FirstOrDefault()?.ProductImages.FirstOrDefault()?.SmallImage}")" />

                                <div class="col-4 mt-3">
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="d-flex float-end">
                        <input type="button" value="Save" id="saveButton" onclick="handleSave()" class="btn btn-primary" />&nbsp;&nbsp;
                        <button type="button" value="Cancel" class="btn btn-secondary" id="cancelButton" data-bs-dismiss="modal">Cancel</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- ProductDetails Modal -->
<div class="modal fade" id="ProductDetailsModal" tabindex="-1" aria-labelledby="ProductDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ProductDetailsModalLabel">Product Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="ProductDetailsContent">
                    <p class="text-center">Loading...</p>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Include jQuery and DataTables -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.min.css" />

<!-- Initialize DataTable -->
<script type="text/javascript">
    // Handle image preview
    function previewImage(input, previewId) {
       if (input.files && input.files[0]) {
           let reader = new FileReader();
           reader.onload = function (e) {
               $("#" + previewId).attr("src", e.target.result);
           };
           reader.readAsDataURL(input.files[0]);
       }
       else {
         $("#" + previewId).attr("src", ""); // Hide if no file is selected
       }
    }

    $(document).ready(function () {
        $('#productsTable').DataTable({
            "paging": true,      // Enable pagination
            "searching": true,   // Enable search box
            "ordering": true,    // Enable column sorting
            "lengthMenu": [5, 10, 25, 50], // Show entries per page options
            "language": {
                "search": "Search Products:"
            },
            "order": [[0,"desc"]]
        });

        $("div.dataTables_filter input").css({
            "margin-bottom": "8px",
            "padding": "8px",
            "border-radius": "5px",
            "border": "1px solid #ccc"
        });

        // Reset form when clicking Cancel or Close (X) button
        document.getElementById("cancelButton").addEventListener("click", resetForm);
        document.querySelector(".btn-close").addEventListener("click", resetForm);

         $(".btn-close").on("click", function () {
            $(this).blur(); // Remove focus from close button
            setTimeout(() => {
                if (document.activeElement.closest("#ProductModal")) {
                    document.activeElement.blur(); // Ensure no element inside modal is focused
                }
            }, 50);
        });

        // Ensure modal is interactive when shown
        $("#ProductModal").on("shown.bs.modal", function () {
            $(this).removeAttr("aria-hidden");
            $(this).removeAttr("inert");
        });

        // Ensure focus is removed when modal is hidden
        $("#ProductModal").on("hidden.bs.modal", function () {
            setTimeout(() => {
                document.activeElement.blur(); // Remove focus from any active element
                $("#someSafeElement").focus(); // Move focus outside modal
            }, 50);
            $(this).attr("inert", "true");
        });

        $("#openModal").click(function () {
             resetForm();
             $("#ProductModal").modal("show");
        });

         var formData = new FormData();
         let productList = [];
         let productName = "";

        // Save product name on first input
        $("#productForm input[placeholder='Enter product name']").on("input", function () {
            productName = $(this).val();
        });

        function previewImage(input, previewId) {
           if (input.files && input.files[0]) {
               let reader = new FileReader();
               reader.onload = function (e) {
                   $("#" + previewId).attr("src", e.target.result);
               };
               reader.readAsDataURL(input.files[0]);
           }
           else {
             $("#" + previewId).attr("src", ""); // Hide if no file is selected
           }
        }

        // Attach change event to file inputs correctly
        $("#LargeImageUpload").change(function () {
            previewImage(this, "largePreviewImage");
        });
        $("#MediumImageUpload").change(function () {
            previewImage(this, "mediumPreviewImage");
        });
        $("#SmallImageUpload").change(function () {
            previewImage(this, "smallPreviewImage");
        });

        const urlParams = new URLSearchParams(window.location.search);
        const productId = urlParams.get("productId");
        const productsImageId = urlParams.get("productsImageId");

        console.log("Product ID:", productId, "Products Image ID:", productsImageId);

        if (productId && productsImageId) {
            if (typeof editProduct === "function") {
                editProduct(productId, productsImageId);
            } else {
                console.error("editProduct function is not defined.");
            }
        } else {
            console.warn("No productId or productsImageId found in URL.");
        }

        $(document).on("click", ".view-details", function () {
            var productId = $(this).data("id");
            var productsImageId = $(this).data("productsimageid");

            if (!productId) {
                showMessageModal("success", "Inavid Product.");
                return;
            }

            // Show the modal
            $("#ProductDetailsModal").modal("show");

            // Show loading message while data is being fetched
            $("#ProductDetailsContent").html("<p class='text-center'>Loading...</p>");

            // Fetch product details via AJAX from GetById
            $.ajax({
                url: `/Admin/GetById`,
                type: "GET",
                data: { id: productId, productsImageId: productsImageId },
                dataType: "json",
                success: function (product) {
                    if (!product || product.productId === 0) {
                        $("#ProductDetailsContent").html("<p class='text-danger'>No details found.</p>");
                        return;
                    }

                    var productDetailsHtml = `
                        <div class="row">
                            <div class="col-md-6">
                                <h5><strong>Name: </strong>${product.name}</h5>
                                ${product.productImages.length > 0 ? `
                                    <p><strong>Type:</strong> ${product.productImages[0].type}</p>
                                    <p><strong>Color:</strong> ${product.productImages[0].color}</p>
                                    <p><strong>Quantity:</strong> ${product.productImages[0].quantity}</p>
                                    <p><strong>MRP:</strong> ₹${product.productImages[0].mrp}</p>
                                    <p><strong>Discount:</strong> ${product.productImages[0].discount}%</p>
                                    <p><strong>Price:</strong> ₹${product.productImages[0].price}</p>
                                    <div class="row">
                                    <div class="col-md-3">
                                        <strong>Description:</strong>
                                     </div>
                                    <div class="col-md-9">
                                     ${product.productImages[0].description}
                                     </div>
                                     </div>
                                ` : `<p>No images available</p>`}
                            </div>

                            <div class="col-md-6 text-center">
                                ${product.productImages.length > 0 ? `
                                    <img src="${product.productImages[0].largeImage}" class="img-thumbnail" width="80%" height="150" />
                                ` : ''}
                            </div>
                            <div class="col-md-10">

                            </div>
                            <div class="col-md-1 mt-2">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                             </div>
                        </div>
                    `;

                    $("#ProductDetailsContent").html(productDetailsHtml);
                },
                error: function () {
                    $("#ProductDetailsContent").html("<p class='text-danger'>Error loading product details.</p>");
                }
            });
        });


        // Function to calculate price
        function calculatePrice() {
            let mrp = parseFloat($("input[name='ProductImagesMRP']").val()) || 0;
            let discount = parseFloat($("input[name='ProductImagesDiscount']").val()) || 0;
            let price = mrp - (mrp * discount / 100); // Apply discount percentage

            $(".price-input").val(price.toFixed(2)); // Update calculated price field
        }

        // Recalculate price when MRP or Discount changes
        $(document).on("input", "input[name='ProductImagesMRP'], input[name='ProductImagesDiscount']", function () {
            calculatePrice();
        });

        // Reset form when clicking the Cancel button
        document.getElementById("cancelButton").addEventListener("click", function () {
            resetForm();
        });

        // Reset form when clicking the Close (X) button
        document.querySelector(".btn-close").addEventListener("click", function () {
            resetForm();
        });

        $("#ProductModal").on("hidden.bs.modal", function () {
            document.activeElement.blur(); // Remove focus from any focused element inside modal
            resetForm(); // Reset the form
        });

    });

    document.getElementById("saveButton").addEventListener("click", function () {
        validateForm();
    });

    function validateForm() {
    let isValid = true;

    function validateInput(id, errorMessage) {
        let inputField = document.getElementById(id);
        let errorSpan = inputField.nextElementSibling;

        if (!inputField.value.trim()) {
            errorSpan.innerText = errorMessage;
            inputField.classList.add("is-invalid");
            isValid = false;
        } else {
            errorSpan.innerText = "";
            inputField.classList.remove("is-invalid");
        }
    }

    function validateFileInput(fileInputId, previewImageId, errorMessage) {
        let fileInput = document.getElementById(fileInputId);
        let previewImage = document.getElementById(previewImageId);
        let errorSpan = fileInput.nextElementSibling;

        if (!fileInput || !previewImage) {
            console.error("Missing elements:", fileInputId, previewImageId);
            return;
        }

        if (!fileInput.files.length && previewImage.src.includes("placeholder.com")) {
            errorSpan.innerText = errorMessage;
            fileInput.classList.add("is-invalid");
            isValid = false;
        } else {
            errorSpan.innerText = "";
            fileInput.classList.remove("is-invalid");
        }
    }

    validateInput("productname", "Product name is required.");
    validateInput("productImagesType", "Type is required.");
    validateInput("productImagesColor", "Color is required.");
    validateInput("ProductImagesQuantity", "Quantity is required.");
    validateInput("ProductImagesMRP", "MRP is required.");
    validateInput("ProductImagesDiscount", "Discount is required.");
    validateInput("ProductImagesArrivingDays", "Arriving days are required.");

    let imageCount = document.querySelectorAll(".image-entry").length;

    for (let i = 0; i < imageCount; i++) {
        validateFileInput("LargeImageUpload", `largePreviewImage_${i}`, "Large image is required.");
        validateFileInput("MediumImageUpload", `mediumPreviewImage_${i}`, "Medium image is required.");
        validateFileInput("SmallImageUpload", `smallPreviewImage_${i}`, "Small image is required.");
    }

    return isValid;
}

    document.querySelectorAll("input, textarea,number").forEach(field => {
        field.addEventListener("input", function () {
            validateFormField(this);
        });

        field.addEventListener("blur", function () {
            validateFormField(this);
        });
    });

    function validateFormField(inputField) {
        let errorSpan = inputField.nextElementSibling;

        if (!inputField.value.trim()) {
            inputField.classList.add("is-invalid");
            errorSpan.innerText = "This field is required.";
        } else {
            inputField.classList.remove("is-invalid");
            errorSpan.innerText = "";
        }
    }

    function AjaxSubmit(){
        let productsList = [];

        var largeImageInput = document.getElementById("LargeImageUpload");
        var mediumImageInput = document.getElementById("MediumImageUpload");
        var smallImageInput = document.getElementById("SmallImageUpload");

            let productData =
            {
            Name: $("#productForm input[placeholder='Enter product name']").val() || "",
            Type: $(`input[name='ProductImagesType']`).val() || "",
            Color: $(`input[name='ProductImagesColor']`).val() || "",
            Description: $(`textarea[name='ProductImagesDescription']`).val() || "",
            LargeImage: largeImageInput?.files?.length ? largeImageInput.files.item(0).name : null,
            MediumImage: mediumImageInput?.files?.length ? mediumImageInput.files.item(0).name : null,
            SmallImage: smallImageInput?.files?.length ? smallImageInput.files.item(0).name : null,
            Quantity: $(`input[name='ProductImagesQuantity']`).val() || "0",
            MRP: $(`input[name='ProductImagesMRP']`).val() || "0",
            Discount: $(`input[name='ProductImagesDiscount']`).val() || "0",
            Price: $(".price-input").val() || "0",
            ArrivingDays: parseInt($(`input[name='ProductImagesArrivingDays']`).val()) || 0
            };

        productsList.push(productData);
        console.log("Updated Product List:", productsList);

        var url = $("#productForm").attr("action");
        var data = new FormData();

            productsList.forEach((product, index) => {
                data.append(`productList[${index}].Name`, product.Name);
                data.append(`productList[${index}].Type`, product.Type);
                data.append(`productList[${index}].Color`, product.Color);
                data.append(`productList[${index}].Description`, product.Description);
                data.append(`productList[${index}].LargeImage`, product.LargeImage);
                data.append(`productList[${index}].MediumImage`, product.MediumImage);
                data.append(`productList[${index}].SmallImage`, product.SmallImage);
                data.append(`productList[${index}].Quantity`, product.Quantity);
                data.append(`productList[${index}].MRP`, product.MRP);
                data.append(`productList[${index}].Discount`, product.Discount);
                data.append(`productList[${index}].Price`, product.Price);
                data.append(`productList[${index}].ArrivingDays`, product.ArrivingDays);
            });

            data.append("largeImageFile", $("#LargeImageUpload")[0].files[0]);
            data.append("mediumImageFile", $("#MediumImageUpload")[0].files[0]);
            data.append("smallImageFile", $("#SmallImageUpload")[0].files[0]);

            console.log(data);

            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response.success)
                        {
                            showMessageModal("success", "Products added successfully!");

                            @* Reset form fields but keep the product name *@
                            $("#productForm")[0].reset();
                            $("#LargeImageUpload, #MediumImageUpload, #SmallImageUpload").val("");

                            $("#largePreviewImage").attr("src", "https://via.placeholder.com/300");
                            $("#mediumPreviewImage").attr("src", "https://via.placeholder.com/150");
                            $("#smallPreviewImage").attr("src", "https://via.placeholder.com/150");

                            $("#productForm input[placeholder='Enter product name']").val(productData.Name);
                            //location.reload();
                            $("#ProductModal").modal("show");
                        }
                        else
                        {
                            showMessageModal("error", `Error: ${response.message}`);
                        }
                },
                error: function () {
                    showMessageModal("error", "Failed to save product.");
                }
            });
    }

    // Function to Edit Product
    async function editProduct(productId, productsImageId) {
        try
        {
             const url = `/Admin/Edit/${productId}?productsImageId=${productsImageId}`;

            // Fetch product data using async/await with $.ajax
            let product = await $.ajax({
                url: url,
                type: 'GET',
                dataType: 'json'
            });

            console.log("Fetched Product Data:", product);

            // Populate product details in the modal
            document.getElementById("ProductModalLabel").innerText = "Edit Product";
            document.getElementById("saveButton").value = "Update Product";
            document.getElementById("cancelButton").value = "Cancel";
                document.getElementById("cancelButton").innerText = "Cancel";
            document.getElementById("productId").value = product.productId;
            document.getElementById("productname").value = product.name;

            // Clear existing images
            let imageContainer = document.getElementById("imageContainer");
            imageContainer.innerHTML = '';

            // Populate product images
            product.productImages.forEach((image, index) => {
                console.log(`Image ${index} URL:`, image.largeImage);

                let imageEntry = document.createElement('div');
                imageEntry.className = 'row image-entry';

                    let largeImageInput = document.createElement('input');
                    largeImageInput.type = 'hidden';
                    largeImageInput.id = `existingLargeImage_${index}`;
                    largeImageInput.value = image.largeImage;
                    imageEntry.appendChild(largeImageInput);

                    let mediumImageInput = document.createElement('input');
                    mediumImageInput.type = 'hidden';
                    mediumImageInput.id = `existingMediumImage_${index}`;
                    mediumImageInput.value = image.largeImage;
                    imageEntry.appendChild(mediumImageInput);

                    let smallImageInput = document.createElement('input');
                    smallImageInput.type = 'hidden';
                    smallImageInput.id = `existingSmallImage_${index}`;
                    smallImageInput.value = image.largeImage;
                    imageEntry.appendChild(smallImageInput);

                document.getElementById("productsImageId").value = image.productsImageId;
                document.getElementById("productImagesType").value = image.type;
                document.getElementById("productImagesColor").value = image.color;

                imageEntry.innerHTML = `
                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Image (Large)</label>
                        <div class="img-preview-container" onclick="document.getElementById('LargeImageUpload').click();">
                            <img id="largePreviewImage_${index}" src="${image.largeImage || 'https://via.placeholder.com/300'}"
                                class="img-thumbnail" style="width:100%; height:185px;">
                        </div>
                        <input type="file" id="LargeImageUpload" name="LargeImageUpload" class="form-control d-none"
                            accept="image/*" onchange="previewImage(this, 'largePreviewImage_${index}')">
                        <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Image (Medium)</label>
                        <div class="img-preview-container" onclick="document.getElementById('MediumImageUpload').click();">
                            <img id="mediumPreviewImage_${index}" src="${image.mediumImage || 'https://via.placeholder.com/150'}"
                                class="img-thumbnail" style="width:100%; height:185px;">
                        </div>
                        <input type="file" id="MediumImageUpload" name="MediumImageUpload" class="form-control d-none"
                            accept="image/*" onchange="previewImage(this, 'mediumPreviewImage_${index}')">
                            <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Image (Small)</label>
                        <div class="img-preview-container" onclick="document.getElementById('SmallImageUpload').click();">
                            <img id="smallPreviewImage_${index}" src="${image.smallImage || 'https://via.placeholder.com/150'}"
                                class="img-thumbnail" style="width:100%; height:185px;">
                        </div>
                        <input type="file" id="SmallImageUpload" name="SmallImageUpload" class="form-control d-none"
                            accept="image/*" onchange="previewImage(this, 'smallPreviewImage_${index}')">
                            <span class="text-danger"></span>
                    </div>

                    <div class="col-md-12 mt-3">
                        <label class="form-label fw-bold">Description</label>
                        <textarea id="ProductImagesDescription" name="ProductImagesDescription" class="form-control" required>${image.description}</textarea>
                        <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Quantity</label>
                        <input type="number" id="ProductImagesQuantity" name="ProductImagesQuantity" class="form-control" value="${image.quantity}" required>
                        <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">MRP</label>
                        <input type="number" id="ProductImagesMRP" name="ProductImagesMRP" class="form-control" value="${image.mrp}" required>
                        <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Discount</label>
                        <input type="number" id="ProductImagesDiscount" name="ProductImagesDiscount" class="form-control" value="${image.discount}" required>
                        <span class="text-danger"></span>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Price</label>
                        <input name="price-input" class="form-control price-input" value="${image.price}" readonly>
                    </div>

                    <div class="col-md-4 mt-3">
                        <label class="form-label fw-bold">Arriving Days</label>
                        <input type="number" id="ProductImagesArrivingDays" name="ProductImagesArrivingDays" class="form-control" value="${image.arrivingDays}" required>
                        <span class="text-danger"></span>
                    </div>
                      <input type="hidden" id="existingLargeImage_${index}" value="${image.largeImage}">
                      <input type="hidden" id="existingMediumImage_${index}" value="${image.mediumImage}">
                      <input type="hidden" id="existingSmallImage_${index}" value="${image.smallImage}">
                `;

                imageContainer.appendChild(imageEntry);
                    document.getElementById(`largePreviewImage_${index}`).src = image.largeImage;
                    document.getElementById(`mediumPreviewImage_${index}`).src = image.mediumImage || "https://via.placeholder.com/150";
                    document.getElementById(`smallPreviewImage_${index}`).src = image.smallImage || "https://via.placeholder.com/150";

            });

            // Delay setting image source until modal content is updated
            setTimeout(() => {
                product.productImages.forEach((image, index) => {
                        let largeImageElement = document.getElementById(`largePreviewImage_${index}`);
                        let mediumImageElement = document.getElementById(`mediumPreviewImage_${index}`);
                        let smallImageElement = document.getElementById(`smallPreviewImage_${index}`);

                        if (largeImageElement) {
                            largeImageElement.src = image.largeImage ? image.largeImage : "https://via.placeholder.com/300";
                            console.log("Updated Large Image:", largeImageElement.src);
                        } else {
                            console.error(`Error: 'largePreviewImage_${index}' element not found.`);
                        }

                        if (mediumImageElement) {
                            mediumImageElement.src = image.mediumImage ? image.mediumImage : "https://via.placeholder.com/150";
                        }

                        if (smallImageElement) {
                            smallImageElement.src = image.smallImage ? image.smallImage : "https://via.placeholder.com/150";
                        }

                    // Update the hidden input dynamically
                    let existingLargeImageInput = document.getElementById(`existingLargeImage_${index}`);
                    if (existingLargeImageInput) {
                        existingLargeImageInput.value = image.largeImage;
                    } 

                    let existingMediumImageInput = document.getElementById(`existingMediumImage_${index}`);
                    if (existingMediumImageInput) {
                        existingMediumImageInput.value = image.mediumImage;
                    }

                    let existingSmallImageInput = document.getElementById(`existingSmallImage_${index}`);
                    if (existingSmallImageInput) {
                        existingSmallImageInput.value = image.smallImage;
                    }
                });
            }, 500);

            // Show the modal
            let productModal = new bootstrap.Modal(document.getElementById("ProductModal"));
            productModal.show();
        }
        catch (error)
        {
            console.error('Error fetching product data:', error);
            showMessageModal("error", "An error occurred while fetching product data.");
        }
    }

    //Function to Calculate Price Based on MRP & Discount
    function calculatePrice() {
            $("input[name^='ProductImagesMRP']").each(function (index) {
                let mrp = parseFloat($(this).val()) || 0;
                let discount = parseFloat($(`input[name='ProductImagesDiscount']`).val()) || 0;
                let price = mrp - (mrp * discount / 100); // Apply discount percentage
                $(".price-input").val(price.toFixed(2)); // Update calculated price field
            });
        }

    // Automatically recalculate price when MRP or Discount changes
    $(document).on("input", "input[name^='ProductImagesMRP'], input[name^='ProductImagesDiscount']", function () {
        calculatePrice();
     });

    function handleSave() {
        if (!validateForm()) {
            return; // Stop execution if validation fails
        }

       let productId = $("#productId").val();
       let productsImageId = $("#productsImageId").val();

       if (productId && productsImageId) {
           updateProduct();  // If both exist, update product
       } else {
              AjaxSubmit();  // If both are empty, add product
       }
    }

    function updateProduct() {
        //alert("Updating product...");
         if (!validateForm()) {
             return; // Stop execution if validation fails
         }
        let productsList = [];

        var largeImageInput = document.getElementById("LargeImageUpload");
        var mediumImageInput = document.getElementById("MediumImageUpload");
        var smallImageInput = document.getElementById("SmallImageUpload");


        let index = 0;
            // Check if a new file is selected; otherwise, use existing
         let existingLargeImage = document.getElementById(`existingLargeImage_${index}`).value;
         let existingMediumImage = document.getElementById(`existingMediumImage_${index}`).value;
         let existingSmallImage = document.getElementById(`existingSmallImage_${index}`).value;

          // If there's an existing image, use the URL to simulate the file object
         let largeImageFile = $("#LargeImageUpload")[0].files.length ? $("#LargeImageUpload")[0].files[0] : createFileFromPath(existingLargeImage, existingLargeImage.split('/').pop());
         let mediumImageFile = $("#MediumImageUpload")[0].files.length ? $("#MediumImageUpload")[0].files[0] : createFileFromPath(existingMediumImage, existingMediumImage.split('/').pop());
         let smallImageFile = $("#SmallImageUpload")[0].files.length ? $("#SmallImageUpload")[0].files[0] : createFileFromPath(existingSmallImage, existingSmallImage.split('/').pop());

         let productId = $("#productId").val();
         let productsImageId = $("#productsImageId").val();

         if (!productId || !productsImageId) {
             showMessageModal("error", "Product ID or Product Image ID is missing.");
             return;
         }

         calculatePrice();

         let productData = {
            ProductId: productId,
            ProductsImageId: productsImageId,
            Name: $("#productForm input[placeholder='Enter product name']").val() || "",
            Type: $(`input[name='ProductImagesType']`).val() || "",
            Color: $(`input[name='ProductImagesColor']`).val() || "",
            Description: $(`textarea[name='ProductImagesDescription']`).val() || "",
            LargeImage: largeImageInput?.files?.length ? largeImageInput.files.item(0).name : extractFileName(existingLargeImage),
            MediumImage: mediumImageInput?.files?.length ? mediumImageInput.files.item(0).name : extractFileName(existingMediumImage),
            SmallImage: smallImageInput?.files?.length ? smallImageInput.files.item(0).name : extractFileName(existingSmallImage),
            Quantity: $(`input[name='ProductImagesQuantity']`).val() || "0",
            MRP: $(`input[name='ProductImagesMRP']`).val() || "0",
            Discount: $(`input[name='ProductImagesDiscount']`).val() || "0",
            Price: $(".price-input").val() || "0",
            ArrivingDays: parseInt($(`input[name='ProductImagesArrivingDays']`).val()) || 0
         };

        productsList.push(productData);
        console.log("Updated Product List:", productsList);

        let url = `/Admin/Edit/${productId}?productsImageId=${productsImageId}`;
        let data = new FormData($("#productForm")[0]);

        productsList.forEach((product, index) => {

            data.append(`productList[${index}].ProductId`, product.ProductId);
            data.append(`productList[${index}].ProductsImageId`, product.ProductsImageId);
            data.append(`productList[${index}].Name`, product.Name);
            data.append(`productList[${index}].Type`, product.Type);
            data.append(`productList[${index}].Color`, product.Color);
            data.append(`productList[${index}].Description`, product.Description);
            data.append(`productList[${index}].LargeImage`, product.LargeImage || "");
            data.append(`productList[${index}].MediumImage`, product.MediumImage || "");
            data.append(`productList[${index}].SmallImage`, product.SmallImage || "");
            data.append(`productList[${index}].Quantity`, product.Quantity || "0");
            data.append(`productList[${index}].MRP`, product.MRP || "0");
            data.append(`productList[${index}].Discount`, product.Discount || "0");
            data.append(`productList[${index}].Price`, product.Price || "0");
            data.append(`productList[${index}].ArrivingDays`, product.ArrivingDays || "0");

        });

                @*  data.append("largeImageFile", $("#LargeImageUpload")[0].files[0]);
                  data.append("mediumImageFile", $("#MediumImageUpload")[0].files[0]);
                 data.append("smallImageFile", $("#SmallImageUpload")[0].files[0]); *@
             data.append("largeImageFile", largeImageFile);
             data.append("mediumImageFile", mediumImageFile);
             data.append("smallImageFile", smallImageFile);

              // Append files only if new files are selected
         if (mediumImageInput.files.length > 0) {
            data.append("largeImageFile", largeImageInput.files[0]);
            console.log("largeImageFile",existingLargeImage,972);
         }
         if (mediumImageInput.files.length > 0) {
             data.append("mediumImageFile", mediumImageInput.files[0]);
         }
         if (smallImageInput.files.length > 0) {
             data.append("smallImageFile", smallImageInput.files[0]);
         }

         // Debug: Check FormData contents
         console.log("FormData Contents:");
         for (let pair of data.entries()) {
             console.log(pair[0], pair[1]);
         }

        $.ajax({
            url: url,
            type: 'POST',
            data: data, // Use FormData instead of productsList
            contentType: false,
            processData: false,
                success: function (response) {
                showMessageModal("success", "Product updated successfully!");
                $('#ProductModal').modal('hide');
            },                                     
           
            error: function () {
                showMessageModal("error", "Failed to update product.");
            }
        });
     }
       
    function extractFileName(url) {
             // Use regular expression to match the file name from the URL
             const regex = /([^/]+)$/;
             const matches = url.match(regex);
             return matches ? matches[0] : '';
        }

    function createFileFromPath(filePath, fileName) {
             // Create a mock file object with the file name and some mock data (e.g., size 0, empty content)
             // In a real scenario, you would fetch the file content from the server
             let file = new File([], fileName, { type: "image/jpeg" });
             return file;
         }

    function resetForm() {
        $("#productForm")[0].reset();  // Reset form fields
        //$("#saveButton").value("Add Product");  // Reset button text
        document.getElementById("saveButton").value = "Add Product";
        document.getElementById("cancelButton").value = "Cancel";
        $("#ProductModalLabel").text("Add Products");  // Reset modal title
        $("#productId").val("");  // Clear hidden product ID
        $("#productsImageId").val("");  // Clear hidden image ID

        // Clear the file inputs
        $("#LargeImageUpload, #MediumImageUpload, #SmallImageUpload").val("");

        // Reset Image Previews
       $("#largePreviewImage").attr("src", "");
        $("#mediumPreviewImage").attr("src", "");
        $("#smallPreviewImage").attr("src", "");

        // Reset any dynamically added fields
        $("#imageContainer").html(`
            <div class="row">
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Image (Large)</label>
                    <div class="img-preview-container" onclick="$('#LargeImageUpload').click();">
                        <img id="largePreviewImage" src="https://via.placeholder.com/300" class="img-thumbnail" style="width:100%; height:185px;">
                    </div>
                    <input type="file" id="LargeImageUpload" name="LargeImageUpload" class="form-control d-none" accept="image/*" onchange="previewImage(this, 'largePreviewImage')">
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Image (Medium)</label>
                    <div class="img-preview-container" onclick="$('#MediumImageUpload').click();">
                        <img id="mediumPreviewImage" src="https://via.placeholder.com/150" class="img-thumbnail" style="width:100%; height:185px;">
                    </div>
                    <input type="file" id="MediumImageUpload" name="MediumImageUpload" class="form-control d-none" accept="image/*" onchange="previewImage(this, 'mediumPreviewImage')">
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Image (Small)</label>
                    <div class="img-preview-container" onclick="$('#SmallImageUpload').click();">
                        <img id="smallPreviewImage" src="https://via.placeholder.com/150" class="img-thumbnail" style="width:100%; height:185px;">
                    </div>
                    <input type="file" id="SmallImageUpload" name="SmallImageUpload" class="form-control d-none" accept="image/*" onchange="previewImage(this, 'smallPreviewImage')">
                    <span class="text-danger"></span>
                </div>
            </div>

            <div class="row">
                <div class="col-md-12 mt-3">
                    <label class="form-label fw-bold">Description</label>
                    <textarea id="ProductImagesDescription" name="ProductImagesDescription" class="form-control" placeholder="Enter product description" required></textarea>
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Quantity</label>
                    <input type="number" id="ProductImagesQuantity" name="ProductImagesQuantity" class="form-control" placeholder="Quantity" required>
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">MRP</label>
                    <input type="number" id="ProductImagesMRP" name="ProductImagesMRP" class="form-control" placeholder="MRP" required>
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Discount</label>
                    <input type="number" id="ProductImagesDiscount" name="ProductImagesDiscount" class="form-control" placeholder="Discount" required>
                    <span class="text-danger"></span>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Price</label>
                    <input name="price-input" class="form-control price-input" placeholder="Price" readonly>
                </div>
                <div class="col-md-4 mt-3">
                    <label class="form-label fw-bold">Arriving Days</label>
                    <input type="number" id="ProductImagesArrivingDays" name="ProductImagesArrivingDays" class="form-control" placeholder="Arriving Days" required>
                    <span class="text-danger"></span>
                </div>
            </div>
        `);
    }

    function showMessageModal(type, message) {
        let modalTitle = document.getElementById("messageModalLabel");
        let modalBody = document.getElementById("messageText");
        let modalHeader = document.querySelector("#messageModal .modal-header");

        // Update the modal based on type (success or error)
        if (type === "success") {
            modalTitle.innerText = "Success";
            modalBody.innerHTML = ` ${message}`;
            modalHeader.classList.add("bg-success", "text-white");
            modalHeader.classList.remove("bg-danger");
        } else if (type === "error") {
            modalTitle.innerText = "Error";
            modalBody.innerHTML = ` ${message}`;
            modalHeader.classList.add("bg-danger", "text-white");
            modalHeader.classList.remove("bg-success");
        }

        // Show the modal
        let messageModal = new bootstrap.Modal(document.getElementById("messageModal"));
        messageModal.show();
    }

    document.addEventListener('DOMContentLoaded', function () {
        console.log("Page ready");
    });

</script>