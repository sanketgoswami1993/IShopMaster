@model List<Products>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Product";
}
<!-- page-title -->
<div class="page-title" style="background-image: url('@Url.Content("~/content/images/section/page-title.jpg")');">
    <div class="container-full">
        <div class="row">
            <div class="col-12">
                <h3 class="heading text-center">Products</h3>
            </div>
        </div>
    </div>
</div>
<!-- /page-title -->
<!-- Section product -->
<section class="flat-spacing">
    <div class="container">
        <div class="wrapper-control-shop">
            <div class="meta-filter-shop">
                <div id="product-count-grid" class="count-text"></div>
                <div id="product-count-list" class="count-text"></div>
                <div id="applied-filters"></div>
                <button id="remove-all" class="remove-all-filters text-btn-uppercase" style="display: none;">REMOVE ALL <i class="icon icon-close"></i></button>
            </div>
            <div class="tf-grid-layout wrapper-shop tf-col-2" id="gridLayout">
                <!-- products -->
                @foreach (var product in Model)
                {
                    var productImage = product.ProductImages.FirstOrDefault();
                    if (productImage != null)
                    {
                        <div class="card-product style-list" data-availability="Out of stock" data-brand="adidas">
                            <div class="card-product-wrapper">
                                @{
                                     int? productImageId = ViewBag.ProductImageId;
                                }
                                <a id="product-link-@product.ProductId"
                                   class="product-img"
                                   asp-action="ProductDetails"
                                   asp-controller="Home"
                                   asp-route-slug="@product.Slug"
                                   asp-route-typeslug="@product.ProductImages.FirstOrDefault()?.TypeSlug"
                                   asp-route-colorslug="@product.ProductImages.FirstOrDefault()?.ColorSlug"
                                   data-slug="@product.Slug">

                                    <img id="main-img-@product.ProductId"
                                         class="lazyload img-product"
                                         data-src="@product.ProductImages.FirstOrDefault()?.MediumImage"
                                         src="@product.ProductImages.FirstOrDefault()?.MediumImage"
                                         alt="image-product"
                                         style="height: 200px; object-fit: cover;">

                                    <img id="hover-img-@product.ProductId"
                                         class="lazyload img-hover"
                                         data-src="@product.ProductImages.FirstOrDefault()?.MediumImage"
                                         src="@product.ProductImages.FirstOrDefault()?.MediumImage"
                                         alt="image-product">
                                </a>

                                @if (productImage.Discount > 0)
                                {
                                   <div class="on-sale-wrap"><span class="on-sale-item">-@productImage.Discount%</span></div>
                                }

                                <div class="list-btn-main">
                                    <a href="#" data-bs-toggle="modal"
                                       id="add-to-cart-btn-@product.ProductId"
                                       class="btn-main-product add-to-cart-btn"
                                       data-name="@Html.Raw(product.Name)"
                                       data-image="@Html.Raw(productImage?.MediumImage)"
                                       data-type="@Html.Raw(productImage.Type)"
                                       data-color="@Html.Raw(productImage.Color)"
                                       data-description="@Html.Raw(productImage.Description)"
                                       data-price="@Json.Serialize(productImage?.Price)"
                                       data-productid="@Json.Serialize(product?.ProductId)"
                                       data-productsimageid="@Json.Serialize(productImage?.ProductsImageId)"
                                       data-arrivingdays="@productImage.ArrivingDays ?? 0">
                                        Add To cart
                                    </a>
                                </div>
                            </div>
                            <div class="card-product-info">
                                <a id="product-text-link-@product.ProductId"
                                      class="title link"
                                      asp-action="ProductDetails"
                                      asp-controller="Home"
                                      asp-route-slug="@product.Slug"
                                      asp-route-typeslug="@productImage.TypeSlug"
                                      asp-route-colorslug="@productImage.ColorSlug"
                                      data-slug="@product.Slug">
                                       @product.Name
                                </a>
                                    @if (productImage.Discount > 0)
                                    {
                                                    <span class="price"><span class="old-price">₹@productImage.MRP</span> ₹@productImage.Price</span>
                                    }
                                    else
                                    {
                                                    <span class="price">₹@productImage.Price</span>
                                    }
                                @* @foreach (var item in product.ProductImages)
                                {
                                    <li class="list-color-item color-swatch active line">
                                        <span class="swatch-value" style="background-color: @item.Color;"></span>
                                        <img class="lazyload" data-src="@item.LargeImage" src="@item.LargeImage" alt="image-product">
                                    </li>
                                } *@
                                <ul class="list-color-product" data-product="@product.ProductId">
                                    @foreach (var item in product.ProductImages)
                                    {
                                        var hexColor = ColorHelper.GetHexColor(item.Color);
                                        <li class="color-swatch list-color-item @(item == product.ProductImages.First() ? "active" : "")"
                                            data-image="@item.MediumImage"
                                            data-colorslug="@item.ColorSlug"
                                            data-typeslug="@item.TypeSlug"
                                            data-product="@product.ProductId"
                                            data-color="@item.Color"
                                            data-type="@item.Type"
                                            data-description="@item.Description"
                                            data-price="@item.Price"
                                            data-productsimageid="@item.ProductsImageId"
                                            data-arrivingdays="@item.ArrivingDays">
                                            <span class="swatch-value" style="background-color: @hexColor" title="@item.Color"></span>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                }

                <!-- pagination -->
                @* <ul class="wg-pagination justify-content-center">
                    <li><a href="#" class="pagination-item text-button">1</a></li>
                    <li class="active"><div class="pagination-item text-button">2</div></li>
                    <li><a href="#" class="pagination-item text-button">3</a></li>
                    <li><a href="#" class="pagination-item text-button"><i class="icon-arrRight"></i></a></li>
                </ul> *@
            </div>
        </div>
    </div>
</section>
<!-- /Section product -->
<!-- Common Modal for Success & Error Messages -->
<div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="messageModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="messageModalLabel">Message</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <h5 id="messageText">Your message here.</h5>
            </div>
            <br />
            <hr />
            <div class="row">
                <div class="col-md-2"></div>
                <div class="col-md-5">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Continue Shopping</button>
                </div>
                <div class="col-md-5">
                    <a asp-controller="Home" asp-action="Cart" class="btn btn-secondary">Go To Cart</a>
                </div>
            </div>
            <br />
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        loadCartFromDatabase();
        updateCartCount();

        document.querySelectorAll('.list-color-product .color-swatch').forEach(swatch => {
            swatch.addEventListener('mouseenter', function () {
                const newImage = this.getAttribute('data-image');
                const productId = this.getAttribute('data-product');
                const colorSlug = this.getAttribute('data-colorslug');
                const typeSlug = this.getAttribute('data-typeslug');
                const slug = document.getElementById('product-link-' + productId)?.getAttribute('data-slug');
                const productTextLink = document.getElementById('product-text-link-' + productId);

                const mainImg = document.getElementById('main-img-' + productId);
                const hoverImg = document.getElementById('hover-img-' + productId);
                const productLink = document.getElementById('product-link-' + productId);
                const addToCartBtn = document.getElementById('add-to-cart-btn-' + productId);

                if (mainImg && hoverImg) {
                    mainImg.src = newImage;
                    hoverImg.src = newImage;
                }

                if (productLink) {
                    const slug = productLink.getAttribute('data-slug');
                    const newUrl = `/Home/ProductDetails/${slug}/${typeSlug}/${colorSlug}`;
                    productLink.setAttribute('href', newUrl);
                }

                if (productTextLink && slug && typeSlug && colorSlug) {
                  const newUrl = `/home/productdetails/${(slug)}/${typeSlug}/${colorSlug}`;
                  productTextLink.setAttribute('href', newUrl);
                }

                // Remove active class
                swatch.parentElement.querySelectorAll('.color-swatch').forEach(el => el.classList.remove('active'));
                swatch.classList.add('active');

                if (addToCartBtn) {
                    addToCartBtn.setAttribute('data-image', swatch.getAttribute('data-image'));
                    addToCartBtn.setAttribute('data-color', swatch.getAttribute('data-color'));
                    addToCartBtn.setAttribute('data-type', swatch.getAttribute('data-type'));
                    addToCartBtn.setAttribute('data-description', swatch.getAttribute('data-description'));
                    addToCartBtn.setAttribute('data-price', swatch.getAttribute('data-price'));
                    addToCartBtn.setAttribute('data-productsimageid', swatch.getAttribute('data-productsimageid'));
                    addToCartBtn.setAttribute('data-arrivingdays', swatch.getAttribute('data-arrivingdays'));
                }
            });
        });

        function updateCartCount() {
            let cartItems = JSON.parse(localStorage.getItem("cartItems")) || [];
            let totalItems = cartItems.reduce((total, item) => total + item.quantity, 0);

            let cartItemCount = document.getElementById("cartItemCount");
            if (cartItemCount) {
                cartItemCount.innerText = totalItems;
            } else {
                console.error("cartItemCount element not found in DOM!");
            }

            console.log(`Cart updated: ${totalItems} items`);
        }

        async function checkStockAvailability(productImageId, requestedQty) {
            try {
                let response = await fetch(`/Home/CheckStockAvailability?productImageId=${productImageId}&requestedQty=${requestedQty}`);
                let data = await response.json();
                return response.ok && data.success; //  Return true if stock is available
            } catch (error) {
                console.error(" Error checking stock:", error);
                return false;
            }
        }

        async function addToCart(productName, productImage, productType, productColor, productDescription, price, productId, productsImageId, arrivingDays) {
            try {
                    // Step 1: Check if the product exists in the database
                    let userId = getCookie("IShopId"); // Get IShopId from cookies

                    // Step 1: Get existing cart items
                    let cartItems = JSON.parse(localStorage.getItem("cartItems")) || [];

                    // Step 2: Find existing item in the cart
                    let existingItemIndex = cartItems.findIndex(
                        item => item.productId.toString() === productId.toString() &&
                                item.productsImageId.toString() === productsImageId.toString()
                    );
                    let newQuantity = 1;

                    if (existingItemIndex !== -1) {
                        // Calculate future quantity
                        newQuantity = cartItems[existingItemIndex].quantity + 1;
                    }

                    // Step 2: Check stock for future quantity
                    const isAvailable = await checkStockAvailability(productsImageId, newQuantity);
                    if (!isAvailable) {
                        showMessageModal("error", "Quantity is out of stock!");
                        return;
                    }

                    // Step 3: Update cart items
                    if (existingItemIndex !== -1) {
                        cartItems[existingItemIndex].quantity = newQuantity;
                        cartItems[existingItemIndex].total = (newQuantity * price).toFixed(2);
                    } else {
                        // Step 4: If not exists, add new item without clearing LocalStorage
                         //localStorage.removeItem("cartItems");
                            cartItems.push({
                            name: productName,
                            image: productImage,
                            type: productType,
                            color: productColor,
                            description: productDescription,
                            quantity: 1,
                            price: price,
                            total: price.toFixed(2),
                            productId: productId,
                            productsImageId: productsImageId,
                            arrivingDays: arrivingDays
                        });
                    }
                // Step 5: Save updated cart to localStorage
                localStorage.setItem("cartItems", JSON.stringify(cartItems));

                // Step 6: Log cartItems to check if it's being stored properly
                console.log("Updated cartItems:", cartItems);

                // Step 7: Update UI & Save cart to DB
                 if (userId) {
                        // Step 4: If logged in, save to database
                        await saveCartToDatabase(cartItems);
                 } else {
                    // Guest user - handle cart in cookies
                    let cookieCart = [];
                    try {
                        let cookieRaw = getCookie("cartItems");
                        cookieCart = cookieRaw ? JSON.parse(cookieRaw) : [];
                    } catch (err) {
                        console.warn("Bad cartItems cookie, resetting.");
                        cookieCart = [];
                    }

                    let cookieIndex = cookieCart.findIndex(
                        item => item.productId.toString() === productId.toString() &&
                                item.productsImageId.toString() === productsImageId.toString()
                    );

                    if (cookieIndex !== -1) {
                        cookieCart[cookieIndex].quantity += 1;
                        cookieCart[cookieIndex].total = (cookieCart[cookieIndex].quantity * price).toFixed(2);
                    } else {
                        cookieCart.push({
                            name: productName,
                            image: productImage,
                            type: productType,
                            color: productColor,
                            description: productDescription,
                            quantity: 1,
                            price: price,
                            total: price.toFixed(2),
                            productId: productId,
                            productsImageId: productsImageId,
                            arrivingDays: arrivingDays
                        });
                    }

                    document.cookie = `cartItems=${JSON.stringify(cookieCart)}; path=/; expires=${new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString()}`;
                }

                updateCartCount();
                // loadCartFromDatabase();

                showMessageModal("success", "Item Added.")

            } catch (error) {
                    console.error("Error checking cart item:", error);
            }
        }

        async function saveCartToDatabase(cartItems) {
            let userId = getCookie("IShopId");

            if (!userId) {
                console.log("User is not logged in. Cart stored in localStorage & cookies.");
                return;
            }

            let response = await fetch("/Home/SaveCart", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(cartItems),
            });

            if (response.ok) {
                console.log("Cart saved to database.");
                loadCartFromDatabase();
            } else {
                console.log("Failed to save cart.");
            }
        }

        document.querySelectorAll(".add-to-cart-btn").forEach(button => {
            button.addEventListener("click", function () {
                let productName = this.getAttribute("data-name");
                let productImage = this.getAttribute("data-image");
                let productType = this.getAttribute("data-type");
                let productColor = this.getAttribute("data-color");
                let productDescription = this.getAttribute("data-description");
                let price = parseFloat(this.getAttribute("data-price")) || 0;
                let productId = parseFloat(this.getAttribute("data-productid")) || 0;
                let productsImageId = parseFloat(this.getAttribute("data-productsimageid")) || 0;
                let arrivingDays = parseInt(this.getAttribute("data-arrivingdays")) || 0;

                addToCart(productName, productImage, productType, productColor, productDescription, price, productId, productsImageId, arrivingDays);
            });
             updateCartCount();
        });

       function getCookie(name) {
           const value = `; ${document.cookie}`;
           const parts = value.split(`; ${name}=`);
           if (parts.length === 2) {
               return parts.pop().split(';').shift();
           }
           return null;
       }

        async function loadCartFromDatabase() {
            let userId = getCookie("IShopId");

            if (userId) {
                // Fetch from database
                let response = await fetch("/Home/GetCart");
                let data = await response.json();

                if (data.success && data.cartItems.length > 0) {
                    localStorage.setItem("cartItems", JSON.stringify(data.cartItems));
                }
            } else {
                // Fetch from cookies for guests
                  let cartItems = getCookie("cartItems");
                  if (cartItems) {
                      localStorage.setItem("cartItems", cartItems);
                }
            }
            updateCartCount();
        }

        function showMessageModal(type, message) {
                let modalTitle = document.getElementById("messageModalLabel");
                let modalBody = document.getElementById("messageText");
                let modalHeader = document.querySelector("#messageModal .modal-header");

                // Update the modal based on type (success or error)
                if (type === "success") {
                    modalTitle.innerText = "Success";
                    modalBody.innerHTML = ` ${message}`;
                    modalHeader.classList.add("bg-success", "text-white");
                    modalHeader.classList.remove("bg-danger");
                } else if (type === "error") {
                    modalTitle.innerText = "Error";
                    modalBody.innerHTML = ` ${message}`;
                    modalHeader.classList.add("bg-danger", "text-white");
                    modalHeader.classList.remove("bg-success");
                }

                // Show the modal
                let messageModal = new bootstrap.Modal(document.getElementById("messageModal"));
                messageModal.show();
            }

    });
</script>
<script>
    function getHexColor(colorName) {
        const dummyDiv = document.createElement("div");
        dummyDiv.style.color = colorName;
        document.body.appendChild(dummyDiv);
        const cs = window.getComputedStyle(dummyDiv);
        const rgb = cs.color.match(/\d+/g);
        document.body.removeChild(dummyDiv);
        if (!rgb) return colorName;
        return "#" + rgb.map(x => (+x).toString(16).padStart(2, '0')).join('');
    }
</script>